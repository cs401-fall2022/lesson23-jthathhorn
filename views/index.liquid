<!DOCTYPE html>
<html lang="en"></html>
<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>{{title}}</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="http://localhost:3000/stylesheets/style.css">
  </head>

  <body>

    <div class="main">

      <div id="nav">
        <p id="links_title">Blog Links</p>
        {% for record in data%}
        <button class="blog_links" id="{{record.blog_id}}">{{record.blog_title}}</button>
<!-- <a href="#{{record.blog_id}}" class="blog_links">{{record.blog_title}}</a><br><br>  -->
        {% endfor%}
      </div>

      <div id="container_blog">
        {% for record in data%}
          <div class="blog_element" id="{{record.blog_id}}">
            <p class="blog_id"># {{record.blog_id}}</p>
            <!-- ADD blog TITLE HERE (use SPAN?)*/ -->
            <p class="blog_title" id="{{record.blog_id}}">{{record.blog_title}}</p>
            <p class="blog_text" id="{{record.blog_id}}">{{record.blog_text}}</p>

            <div class="edit_delete">
              <div class="form_popup" name="edit_form" id="{{record.blog_id}}">
                <form action="/update" class="form_container">
                  <!--<h1>Edit Blog</h1>-->
                  <p>#{{record.blog_id}}</p>
                  <label for="blog_title">
                    <b>Edit title:</b>
                  </label>
                  <input type="text" class="edit_title" name="blog_title" id="{{record.blog_id}}" value="{{record.blog_title}}" required>

                  <label for="blog_text">
                    <b>Edit blog post:</b>
                  </label>
                  <textarea class="edit_blog_text" name="blog_text" id="{{record.blog_id}}" required rows="20" cols="60">{{record.blog_text}}</textarea>
                  <div class="edit_form_action_buttons">
                    <button type="button" class="edit_submit" id="{{record.blog_id}}">UPDATE</button>
                    <button type="button" class="edit_discard" id="{{record.blog_id}}">DISCARD</button>
                  </div>
                </form>
              </div>

              <input type="button" class="edit_button" id="{{record.blog_id}}" name="edit_button" value="EDIT BLOG">
              <input type="button" class="delete_button" id="{{record.blog_id}}" name="delete_button" value="DELETE BLOG">
            </div>
          </div>
        {% endfor%}

      </div>
    </div>

    <div class="header">
      <h1>El Blog</h1>
      <hr>
    </div>

    <div class="background_homepage">
      <br><br><br><br><br><br><br><br><br><br><br><br>
      <p>This will be the HOME PAGE / page displayed upon loading of site and document background....</p>
<!--  <img href="./public/images/sagg.jpeg"> put image on background/wallpaper of home page -->
      <br><br><br><br><br><br><br><br><br><br><br><br>   
    </div>


<br><br><br><br><br><br><br><br>  

    <hr>

    <h2>Post a new blog</h2>
    <form action="/add" method="POST">

      <div>
        <label for="blog_title">Blog title:</label>
      </div>
      <div>
        <input type="text" name="blog_title" required>
      </div>

      <div>
        <label for="blog_text">Blog text:</label>
      </div>
      <div>
        <textarea name="blog_text" id="blog_text" rows="3" cols="40"></textarea>
      </div>
      <div>
        <button>Create new blog</button>
      </div>
    </form>

    <hr>

  </body>

  <script>

    var blogTitleOnEditOpen = null;
    var blogTextOnEditOpen = null;
    var dataOnEditOpenFree = true;
      // after HTML is loaded, perform JS actions on content
    window.addEventListener("DOMContentLoaded", domLoadedHandler);
      /* Registers all button listeners for functionality after DOM content loaded */
    function domLoadedHandler() {
      console.log("DOM content loaded...");
      let deleteButtons = document.getElementsByClassName("delete_button");
      let editButtons = document.getElementsByClassName("edit_button");
      let editDiscardButtons = document.getElementsByClassName("edit_discard");
      let editSubmitFormButtons = document.getElementsByClassName("edit_submit");
      let blogTitleLinks = document.getElementsByClassName("blog_links");
      for (let i = 0; i < deleteButtons.length; i++) {
        deleteButtons[i].addEventListener("click", deleteClickHandler);
        editButtons[i].addEventListener("click", editClickHandler);
        blogTitleLinks[i].addEventListener("click", titleLinkClickHandler);
    // Future code improvement: register these listeners only for specific elements, when its edit form is opened? (save loading unused code)
        editDiscardButtons[i].addEventListener("click", editDiscardClickHandler);
        editSubmitFormButtons[i].addEventListener("click", editSubmitFormClickHandler);
      }
    }
      /* handler for blog title links in Nav section */
    function titleLinkClickHandler(event){
      let button = event.target;
      let blogElements = document.getElementsByClassName("blog_element");
      let found = false;
      for(i=0; i < blogElements.length; i++){
        blogElements[i].style.display = "none"; // close all other blogs before opening selected blog
      }
      for(i=0; i < blogElements.length; i++){
        if(blogElements[i].id == button.id){
          blogElements[i].style.display = "flex"; // show blog associated with title button clicked
          found = true;
        }
      }
      if(!found){console.error("Error: title link id not associated with a blog element (titleLinkClickHandler())");}
    }
      /* handler for EDIT DISCARD button (in pop up edit form) */
    function editDiscardClickHandler(event) {
      let button = event.target;
      let popupElements = document.getElementsByClassName("form_popup");
      for (i = 0; i < popupElements.length; i ++) {
        if (popupElements[i].id == button.id) {
          popupElements[i].style.display = "none"; // hide edit popup form
            // re-assign original values to form fields
          let editFormTitleElements = document.getElementsByClassName("edit_title");
          let editFormTextAreaElements = document.getElementsByClassName("edit_blog_text");
          editFormTitleElements[i].value = blogTitleOnEditOpen;
          editFormTextAreaElements[i].value = blogTextOnEditOpen;
          break;
        }
      } // reset 'global' variables
      blogTitleOnEditOpen = null;
      blogTextOnEditOpen = null;
      dataOnEditOpenFree = true;
    }

      /* handler for EDIT button (show pop up edit form) */
    function editClickHandler(event) {
      if(dataOnEditOpenFree){
        dataOnEditOpenFree = false;// don't allow mulitiple blog edits concurrently--will not properly re-populate edit form field values
        let button = event.target;
        blogTitleElements = document.getElementsByClassName("blog_title");// store edit form title and text values upon form open, for replacement if DISCARD changes
        blogTextElements = document.getElementsByClassName("blog_text");
        for (i = 0; i < blogTitleElements.length; i++) {
          if (blogTitleElements[i].id == button.id) {
            blogTitleOnEditOpen = blogTitleElements[i].textContent; // alt use .textContent() ??
            blogTextOnEditOpen = blogTextElements[i].textContent;
            break;
          }
        }
          // get popup FORM elements to set display to visible on 'this' form
        let popupElements = document.getElementsByClassName("form_popup");
        for (i = 0; i < popupElements.length; i ++) {
          if (popupElements[i].id == button.id) {
            popupElements[i].style.display = "block";
            break;
          }
        }
      }
      else{console.log("Error: trying to access blog EDIT form while dataOnEditOpenFree is false. One blog edit at a time (UPDATE or DISCARD and proceed)");
            window.alert("Another blog edit form is open--UPDATE or DISCARD before editing another blog");}
    }
      /* handler for UPDATE button / POST request */
    async function editSubmitFormClickHandler(event) {
      let button = event.target;
      let editFormTitleElements = document.getElementsByClassName("edit_title");
      let editFormTextAreaElements = document.getElementsByClassName("edit_blog_text");
      var i;
      for (i = 0; i < editFormTextAreaElements.length; i++) {
        if (editFormTextAreaElements[i].id == button.id) {
          var editedText = editFormTextAreaElements[i].value; // alt use .textContent() ??
          var editedTitle = editFormTitleElements[i].value;
          break;
        }
      } // prepare values for JSON fetch request
      let data = { 
        "id": button.id,
        "value": editedText,
        "title": editedTitle };
      let json = JSON.stringify(data);
      let response = await fetch("/edit", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: json
      }).then(function(response) {
        console.log("/edit fetch() response.ok status: " + response.ok);
          // make sure POST request was successful, then update title, text
        if (response.ok) {
          let pElementsBlogText = document.getElementsByClassName("blog_text");
          let pElementsBlogTitle = document.getElementsByClassName("blog_title");
            // make sure button and pElements are correctly associated--change in elements arrays conceivable? (e.g. if another operation/database change and page reload changed the element array size/contents?)
          if (pElementsBlogText[i].id == button.id) {
            pElementsBlogText[i].textContent = editedText;
            pElementsBlogTitle[i].textContent = editedTitle;
            // hide blog edit form after successful update
          let popupElements = document.getElementsByClassName("form_popup");
          for (i = 0; i < popupElements.length; i ++) {
            if (popupElements[i].id == button.id) {
              popupElements[i].style.display = "none";       
              break;
            }
          }          
          } else {console.log("Error: Order of blog_text <p> elements unexpected ( editSubmitFormClickHandler() )");}
          dataOnEditOpenFree = true; // release global variable to allow use by another edit popup form
        }
      // ?? best way to throw error? 
        else {console.log("ERROR: POST request was unsuccessful");} // reset 'global' variables
      let blogTitleOnEditOpen = null;
      let blogTextOnEditOpen = null;
      }).catch((error) => {
        console.error("ERROR: " + error);
      });
    }

      /* handler for DELETE operation / POST request */
    async function deleteClickHandler(event) {
      if(dataOnEditOpenFree){
        if (confirm("DELETE BLOG??")) { // prompt user to confirm DELETE
          let button = event.target;
          let data = {
            "id": button.id,
            "name": "delete_button"
          };
          let json = JSON.stringify(data);
          response = await fetch("/delete", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: json
          }).then((response) => { // if request success, delete the blog element and nav title link in DOM to reflect update
            if (response.ok) {
              let blogElements = document.getElementsByClassName("blog_element");
              let blogTitleLinks = document.getElementsByClassName("blog_links");
              let found = false;
              for(i=0; i < blogElements.length; i++){
                if ( (blogElements[i].id == button.id) && (blogTitleLinks[i].id == button.id) ){ // make sure both link and blog element match
                  let blogElementToDelete = blogElements[i];
                  let titleLinkElementToDelete = blogTitleLinks[i];
                  blogElementToDelete.parentNode.removeChild(blogElementToDelete);
                  titleLinkElementToDelete.parentNode.removeChild(titleLinkElementToDelete);
                  found = true;
                  break;
                }
              }if(!found){console.error("Error: blog element to delete not found");}
            }else{console.error("Error: something went wrong in /delete request (deleteClickHandler())");}
          }).catch((err) =>{
            console.error("Error: something f'd up in deleteClickHandler request: "+err);
          });
        }
      }
      else{window.alert("Cannot DELETE a blog until other blog edit form is resolved");}
    }
  </script>
</html>